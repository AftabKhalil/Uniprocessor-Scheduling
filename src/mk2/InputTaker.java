package mk2;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import static mk2.MK2.*;

/**
 * @author aftab
 */
public class InputTaker extends javax.swing.JFrame {

    /**
     * Creates new form InputTaker
     */
    
    Image bkImage;
    int method;
    
    public InputTaker() {
        try {
            bkImage = ImageIO.read(new File(this.getClass().getResource("img2.jpg").toURI()));
        } catch (IOException ex) {
            Logger.getLogger(InputTaker.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
            Logger.getLogger(InputTaker.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel()
        {
            @Override
            public void paintComponent(Graphics g)
            {
                super.paintComponents(g);
                g.drawImage(bkImage,0,0,null);
            }
        }
        ;
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nonpreemptive = new javax.swing.JLabel();
        FCFS = new javax.swing.JLabel();
        SJF = new javax.swing.JLabel();
        HRRN = new javax.swing.JLabel();
        preemptive = new javax.swing.JLabel();
        SRTLabel = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Proceed = new javax.swing.JButton();
        select = new javax.swing.JButton();
        selectedMethodLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Uniprocessor Scheduling");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("MV Boli", 3, 24)); // NOI18N
        jLabel1.setText("UNIVERSITY OF KARACHI");

        jLabel2.setFont(new java.awt.Font("MV Boli", 3, 18)); // NOI18N
        jLabel2.setText("DEPARTMENT OF COMPUTER SCIENCE");

        jLabel3.setText("This program is designed to illustrate the execution of Process");

        jLabel4.setText("by a UniProcessor, Kindly select the algorithm that must be");

        jLabel5.setText("used by the Processor to Execute the tasks, then click the");

        jLabel6.setText("\"Proceed\" button to proceed.");

        nonpreemptive.setText("Non-Preemptive :");
        nonpreemptive.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nonpreemptiveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nonpreemptiveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nonpreemptiveMouseExited(evt);
            }
        });

        FCFS.setText("FCFS");
        FCFS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FCFSMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                FCFSMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                FCFSMouseExited(evt);
            }
        });

        SJF.setText("SJF");
        SJF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SJFMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SJFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SJFMouseExited(evt);
            }
        });

        HRRN.setText("HRRN");
        HRRN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HRRNMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HRRNMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                HRRNMouseExited(evt);
            }
        });

        preemptive.setText("Preemptive :");
        preemptive.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                preemptiveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                preemptiveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                preemptiveMouseExited(evt);
            }
        });

        SRTLabel.setText("SRT");
        SRTLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SRTLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SRTLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SRTLabelMouseExited(evt);
            }
        });

        jLabel13.setText("Click any where above to get details!");

        Proceed.setText("Proceed");
        Proceed.setEnabled(false);
        Proceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProceedActionPerformed(evt);
            }
        });

        select.setText("Select Algorithm");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        selectedMethodLabel.setBackground(new java.awt.Color(255, 0, 255));
        selectedMethodLabel.setForeground(new java.awt.Color(255, 102, 0));
        selectedMethodLabel.setText("Selected: ----");

        jLabel12.setText("Made By: Aftab Khalil");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(236, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(preemptive)
                                .addComponent(nonpreemptive))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(FCFS)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(SJF)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(HRRN))
                                .addComponent(SRTLabel)))
                        .addComponent(jLabel13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(selectedMethodLabel)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(select)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Proceed)))
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nonpreemptive)
                    .addComponent(FCFS)
                    .addComponent(SJF)
                    .addComponent(HRRN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preemptive)
                    .addComponent(SRTLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Proceed)
                    .addComponent(select))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectedMethodLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(43, 43, 43)
                .addComponent(jLabel12)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       int c = JOptionPane.showConfirmDialog(this,"Are you sure to exit?","EXIT ?",YES_NO_OPTION,QUESTION_MESSAGE);
         if(c==0)
        {
             System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void ProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProceedActionPerformed
        this.setVisible(false);
        f.setVisible(true);
    }//GEN-LAST:event_ProceedActionPerformed

    private void nonpreemptiveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nonpreemptiveMouseEntered
       nonpreemptive.setForeground(Color.blue);
    }//GEN-LAST:event_nonpreemptiveMouseEntered

    private void nonpreemptiveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nonpreemptiveMouseExited
        nonpreemptive.setForeground(Color.black);
    }//GEN-LAST:event_nonpreemptiveMouseExited

    private void preemptiveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preemptiveMouseEntered
        preemptive.setForeground(Color.blue);
    }//GEN-LAST:event_preemptiveMouseEntered

    private void preemptiveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preemptiveMouseExited
       preemptive.setForeground(Color.black);
    }//GEN-LAST:event_preemptiveMouseExited

    private void FCFSMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FCFSMouseEntered
        FCFS.setForeground(Color.blue);
    }//GEN-LAST:event_FCFSMouseEntered

    private void FCFSMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FCFSMouseExited
        FCFS.setForeground(Color.black);
    }//GEN-LAST:event_FCFSMouseExited

    private void SJFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SJFMouseEntered
        SJF.setForeground(Color.blue);
    }//GEN-LAST:event_SJFMouseEntered

    private void SJFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SJFMouseExited
       SJF.setForeground(Color.black);
    }//GEN-LAST:event_SJFMouseExited

    private void HRRNMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HRRNMouseEntered
        HRRN.setForeground(Color.blue);
    }//GEN-LAST:event_HRRNMouseEntered

    private void HRRNMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HRRNMouseExited
        HRRN.setForeground(Color.black);
    }//GEN-LAST:event_HRRNMouseExited

    private void SRTLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SRTLabelMouseEntered
        SRTLabel.setForeground(Color.blue);
    }//GEN-LAST:event_SRTLabelMouseEntered

    private void SRTLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SRTLabelMouseExited
        SRTLabel.setForeground(Color.black);
    }//GEN-LAST:event_SRTLabelMouseExited

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
         Object c = JOptionPane.showInputDialog(this,"Please select Algorithm", "Algorithm", QUESTION_MESSAGE, null,new Object[]{"FCFS","SJF","HRRN","SRT"}, null);
         String method = String.valueOf(c);
         int methodInt = -1;
         if(method.compareTo("null")!=0)
        {
             switch(method)
            {
                case "FCFS": methodInt = 1;
                             selectedMethodLabel.setText("Selected: FCFS");
                             break;
                case "SJF":  methodInt = 2;
                             selectedMethodLabel.setText("Selected: SJF");
                             break;
                case "HRRN": methodInt = 3;
                             selectedMethodLabel.setText("Selected: HRRN");
                             break;
                case "SRT":  methodInt = 4;
                             selectedMethodLabel.setText("Selected: SRT");
           }
             System.out.println("Method is "+methodInt);
             mk2.processor.setMethod(methodInt);
             Proceed.setEnabled(true);
        }
    }//GEN-LAST:event_selectActionPerformed

    private void nonpreemptiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nonpreemptiveMouseClicked
       JOptionPane.showMessageDialog(this,"Non-preemptive multitasking, is a style of computer multitasking\n"
                                        + "in which the operating system never initiates a context switch\n"
                                        + "from a running process to another process.","Non-Preemptive",INFORMATION_MESSAGE);
    }//GEN-LAST:event_nonpreemptiveMouseClicked

    private void preemptiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preemptiveMouseClicked
       JOptionPane.showMessageDialog(this,"Preemption is the act of temporarily interrupting a task being carried\n"
                                        + "out by a computer system, without requiring its cooperation,\n"
                                        + "and with the intention of resuming the task at a later time.","Preemptive",INFORMATION_MESSAGE);
    }//GEN-LAST:event_preemptiveMouseClicked

    private void FCFSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FCFSMouseClicked
        JOptionPane.showMessageDialog(this,"First-Come-First-Served algorithm is the simplest scheduling algorithm.\n"
                                         + "Processes are dispatched according to their arrival time on the ready queue.\n"
                                         + "Being a nonpreemptive discipline, once a process has a CPU, it runs to completion.","FCFS",INFORMATION_MESSAGE);
    }//GEN-LAST:event_FCFSMouseClicked

    private void SJFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SJFMouseClicked
        JOptionPane.showMessageDialog(this,"Shortest job first , also known as shortest job next (SJN)\n"
                                          + "or shortest process next (SPN), is a scheduling policy that\n"
                                          + "selects the waiting process with the smallest execution time to execute next","SJF",INFORMATION_MESSAGE);
    }//GEN-LAST:event_SJFMouseClicked

    private void HRRNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HRRNMouseClicked
       JOptionPane.showMessageDialog(this,"Highest response ratio next scheduling is a non-preemptive discipline,\n"
                                        + "similar to shortest job next (SJN), in which the priority of each job\n"
                                        + "is dependent on its estimated run time,\n"
                                        + "and also the amount of time it has spent waiting.\n"
                                        + "Jobs gain higher priority the longer they wait,\n"
                                        + "which prevents indefinite postponement (process starvation).","HRRN",INFORMATION_MESSAGE);
    }//GEN-LAST:event_HRRNMouseClicked

    private void SRTLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SRTLabelMouseClicked
       JOptionPane.showMessageDialog(this,"Shortest remaining time, also known as shortest remaining time first (SRTF),\n"
                                        + "is a scheduling method that is a preemptive version of shortest job next scheduling.\n"
                                        + "In this scheduling algorithm, the process with the smallest amount of time remaining\n"
                                        + "until completion is selected to execute.","SRT",INFORMATION_MESSAGE);
    }//GEN-LAST:event_SRTLabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputTaker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputTaker().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FCFS;
    private javax.swing.JLabel HRRN;
    private javax.swing.JButton Proceed;
    private javax.swing.JLabel SJF;
    private javax.swing.JLabel SRTLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel nonpreemptive;
    private javax.swing.JLabel preemptive;
    private javax.swing.JButton select;
    private javax.swing.JLabel selectedMethodLabel;
    // End of variables declaration//GEN-END:variables
}