package mk2;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

import static mk2.MK2.mk2;

/**
 * @author aftab
 */
public class Frame extends javax.swing.JFrame {

    /**
     * Creates new form Frame
     */
    Image bkImage;
    
    public Frame() {
        try {
            File f = new File(this.getClass().getResource("bk.jpg").toURI());
            bkImage = ImageIO.read(f);
        } catch (Exception ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        } 
        initComponents();
        this.setLocationRelativeTo(null);
        Panel.setBackground(Color.BLACK);
        
       Repainter r = new Repainter();
       r.startRepainting();        
    }

     public class Repainter implements Runnable
    {
         private Thread repainter;
         
         public Repainter()
        {
             repainter = new Thread(this);
        }
         
         public void startRepainting()
        {
             repainter.start();
        }
         
         @Override
         public void run()
        {
             int currentQuantum;
             String method;
             Process p;
             DefaultTableModel tm = (DefaultTableModel) Table.getModel();
            
             while(true)
            {
                 currentQuantum =  mk2.processor.currentQuantum;
                 currentQuantumLabel.setText(String.valueOf(currentQuantum));
                 
                 method = mk2.processor.getMethod();
                 methodLabel.setText(method);
                 
                 p = mk2.processor.getCurrentProcess();
                 if(p!=null)
                {
                     currentProcessIdLabel.setText(String.valueOf(p.getProcessId()));
                     currentProcessArivalQuantumLabel.setText(String.valueOf(p.getIncomeTime()));
                     currentProcessStartQuantumLabel.setText(String.valueOf(p.getStartQuantum()));
                     currentProcessTotalInstructionLabel.setText(String.valueOf(p.getTotalInstruction()));
                     currentProcessExecutedInstructionsLabel.setText(String.valueOf(p.getRemainingInstructions()));
                     processorStateLabel.setText("Working");
                     processorStateLabel.setForeground(Color.BLUE);
                     shutdown.setEnabled(false);
                     Exit.setEnabled(true);
                }
                 else
                {
                     currentProcessIdLabel.setText("----");
                     currentProcessArivalQuantumLabel.setText("----");
                     currentProcessStartQuantumLabel.setText("----");
                     currentProcessTotalInstructionLabel.setText("----");
                     currentProcessExecutedInstructionsLabel.setText("----");
                     processorStateLabel.setText("Ideal");
                     processorStateLabel.setForeground(Color.GREEN);
                     shutdown.setEnabled(true);
                     Exit.setEnabled(false);
                }
                
                tm.setRowCount(0);
                 
                for (int i = 0; i < mk2.processor.getAllProcesses().size(); i++)
                {
                    Process po = (Process) mk2.processor.getAllProcesses().get(i);
                    Object[] o = new Object[5];
                    o[0] = po.getProcessId();
                    o[1] = po.getIncomeTime();
                    o[2] = po.getStartQuantum();
                    o[3] = po.getTotalInstruction();
                    o[4] = po.getExecutedInstructions();
                    
                    tm.addRow(o);
                }
                    
                 
                 repaint();
                 revalidate();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
    }
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel()
        {
            @Override
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                g.drawImage(bkImage,0,0,null);
            }
        }
        ;
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        methodLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        currentQuantumLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        currentProcessIdLabel = new javax.swing.JLabel();
        currentProcessArivalQuantumLabel = new javax.swing.JLabel();
        currentProcessStartQuantumLabel = new javax.swing.JLabel();
        currentProcessTotalInstructionLabel = new javax.swing.JLabel();
        currentProcessExecutedInstructionsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        insertNewProcess = new javax.swing.JButton();
        insertNewProcessField = new javax.swing.JTextField();
        shutdown = new javax.swing.JButton();
        jobSubbmitted = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        processorStateLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Uniprocessor Scheduling");
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.black);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        Panel.setBackground(new java.awt.Color(255, 153, 153));

        jLabel1.setFont(new java.awt.Font("MV Boli", 3, 24)); // NOI18N
        jLabel1.setText("UNIVERSITY OF KARACHI");

        jLabel2.setFont(new java.awt.Font("MV Boli", 3, 18)); // NOI18N
        jLabel2.setText("DEPARTMENT OF COMPUTER SCIENCE");

        jLabel3.setText("Scheduling Algorithm:");

        methodLabel.setText("FCFS");

        jLabel4.setText("Current Quantum:");

        currentQuantumLabel.setText("000");

        jLabel5.setText("Current Process Id:");

        jLabel6.setText("Arrival Quantum:");

        jLabel7.setText("Start Quantum");

        jLabel8.setText("Total Instructions:");

        jLabel9.setText("Remaining Instructions:");

        currentProcessIdLabel.setText("0000");

        currentProcessArivalQuantumLabel.setText("0000");

        currentProcessStartQuantumLabel.setText("0000");

        currentProcessTotalInstructionLabel.setText("0000");

        currentProcessExecutedInstructionsLabel.setText("0000");

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "P_Id", "Arrival Quantum", "Start Quantum", "Total Instructions", "Executed Instructions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(3).setResizable(false);
            Table.getColumnModel().getColumn(4).setResizable(false);
        }

        insertNewProcess.setText("Insert New Process");
        insertNewProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertNewProcessActionPerformed(evt);
            }
        });

        insertNewProcessField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertNewProcessFieldActionPerformed(evt);
            }
        });

        shutdown.setText("Shut down");
        shutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownActionPerformed(evt);
            }
        });

        jobSubbmitted.setText("                ");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        processorStateLabel.setBackground(new java.awt.Color(255, 255, 255));
        processorStateLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        processorStateLabel.setForeground(new java.awt.Color(0, 0, 255));
        processorStateLabel.setText("Working");

        jLabel11.setText("Processor State:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(processorStateLabel)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(processorStateLabel)
                .addComponent(jLabel11))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setText("  Instructions:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel10))
        );

        jLabel12.setForeground(new java.awt.Color(153, 153, 0));
        jLabel12.setText("Made By: Aftab Khalil, Habiba Abbasi");

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addContainerGap(100, Short.MAX_VALUE)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(PanelLayout.createSequentialGroup()
                                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(currentProcessIdLabel)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(currentProcessArivalQuantumLabel)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(currentProcessStartQuantumLabel)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(currentProcessTotalInstructionLabel)
                                            .addComponent(jLabel8)))
                                    .addComponent(jLabel9)
                                    .addComponent(currentProcessExecutedInstructionsLabel))
                                .addGroup(PanelLayout.createSequentialGroup()
                                    .addGap(29, 29, 29)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(PanelLayout.createSequentialGroup()
                                    .addGap(269, 269, 269)
                                    .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(currentQuantumLabel)
                                        .addComponent(methodLabel))))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(88, 88, 88))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelLayout.createSequentialGroup()
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelLayout.createSequentialGroup()
                                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelLayout.createSequentialGroup()
                                        .addComponent(shutdown)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Exit))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(insertNewProcess)
                                        .addComponent(jobSubbmitted, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(PanelLayout.createSequentialGroup()
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(insertNewProcessField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(60, 60, 60))))
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(methodLabel)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(currentQuantumLabel))
                .addGap(24, 24, 24)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentProcessIdLabel)
                    .addComponent(currentProcessArivalQuantumLabel)
                    .addComponent(currentProcessStartQuantumLabel)
                    .addComponent(currentProcessTotalInstructionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentProcessExecutedInstructionsLabel)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(insertNewProcessField)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertNewProcess)
                        .addGap(17, 17, 17)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jobSubbmitted)
                            .addComponent(jLabel12)))
                    .addGroup(PanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shutdown)
                            .addComponent(Exit))))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
     int c = JOptionPane.showConfirmDialog(this,"Are you sure to exit right now,Why don't you shutdown normally"
                 +"\nExiting this way will not show you the avg Utlization of the CPU\nSo, Exit?","EXIT ?",YES_NO_OPTION,QUESTION_MESSAGE);
         if(c==0)
        {
             System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void insertNewProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertNewProcessActionPerformed
         String ins = this.insertNewProcessField.getText();
         this.insertNewProcessField.setText("");
         int totalInstruction;
         try
        {
             totalInstruction = Integer.valueOf(ins);
             if(totalInstruction <=0 )
            {
                 JOptionPane.showMessageDialog(this,"Not Valid Instructions","ERROR!",0);
                 return;
            }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this,"Not Valid Instructions","ERROR!",0);
             return;
        }
         System.out.println("admit p = "+totalInstruction);
         mk2.processor.addProcess(totalInstruction);
         new JobSubmittedColorChanger();
         
    }//GEN-LAST:event_insertNewProcessActionPerformed

     private class JobSubmittedColorChanger implements Runnable
    {
         Thread colorChanger;
         public JobSubmittedColorChanger()
        {
             colorChanger = new Thread(this);
             colorChanger.start();
        }
        @Override
        public void run() {
            jobSubbmitted.setText("Job Submitted!");
            jobSubbmitted.setForeground(Color.red);
            revalidate();
            repaint();
             try {
                 Thread.sleep(1000);
             } catch (InterruptedException ex) {
                 Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
             }
            jobSubbmitted.setText("               ");
        }
                
    }
    
    private void insertNewProcessFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertNewProcessFieldActionPerformed
         String ins = this.insertNewProcessField.getText();
         this.insertNewProcessField.setText("");
         int totalInstruction;
         try
        {
             totalInstruction = Integer.valueOf(ins);
             if(totalInstruction <=0 )
            {
                 JOptionPane.showMessageDialog(this,"Not Valid Instructions","ERROR!",0);
                 return;
            }
        }
         catch(Exception e)
        {
             JOptionPane.showMessageDialog(this,"Not Valid Instructions","ERROR!",0);
             return;
        }
         System.out.println("admit p = "+totalInstruction);
         mk2.processor.addProcess(totalInstruction);
         new JobSubmittedColorChanger();
    }//GEN-LAST:event_insertNewProcessFieldActionPerformed

    private void shutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownActionPerformed
      /*  Process[] p = new Process[mk2.processor.getWholeProcesses().size()];
        
        for (int i = 0; i < p.length; i++) {
            p[i] = (Process) mk2.processor.getWholeProcesses().get(i);
        }
        */
      
         mk2.processor.e.executer.stop();
         mk2.processor.stopQuantum();
       
      
         String end = Calculator.calculate(mk2.processor.getWholeProcesses());
         
         if(end.compareTo("")==0)
        {
             int c = JOptionPane.showConfirmDialog(this,"Are you sure to exit without doing any Work","Exit ?",YES_NO_OPTION,QUESTION_MESSAGE);
             if(c==0)
            {
                 System.exit(0);
            }
             return;
        }
         
         this.setEnabled(false);
         
         JTextArea window = new JTextArea();
         window.setText(end);
         window.setEditable(false);
         JPanel n;
         n = new JPanel();
         n.add(window);
         
         JFrame summary = new JFrame();
         summary.setTitle("Summary");
         //summary.setLocationRelativeTo(null);
         summary.add(n);
         summary.pack();
         summary.setResizable(false);
         summary.setDefaultCloseOperation(EXIT_ON_CLOSE);
         summary.setAlwaysOnTop(true);
         summary.revalidate();
         summary.repaint();
         summary.setVisible(true);
           
    }//GEN-LAST:event_shutdownActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
         int c = JOptionPane.showConfirmDialog(this,"Are you sure to exit right now,\nLet the processor finish the work\nand then shutdown normally"
                 +"\nExiting this way will not show you the avg Utlization of the CPU\nSo, Exit?","EXIT ?",YES_NO_OPTION,QUESTION_MESSAGE);
         if(c==0)
        {
             System.exit(0);
        }
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JPanel Panel;
    private javax.swing.JTable Table;
    private javax.swing.JLabel currentProcessArivalQuantumLabel;
    private javax.swing.JLabel currentProcessExecutedInstructionsLabel;
    private javax.swing.JLabel currentProcessIdLabel;
    private javax.swing.JLabel currentProcessStartQuantumLabel;
    private javax.swing.JLabel currentProcessTotalInstructionLabel;
    private javax.swing.JLabel currentQuantumLabel;
    private javax.swing.JButton insertNewProcess;
    private javax.swing.JTextField insertNewProcessField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jobSubbmitted;
    private javax.swing.JLabel methodLabel;
    private javax.swing.JLabel processorStateLabel;
    private javax.swing.JButton shutdown;
    // End of variables declaration//GEN-END:variables
}